{"version":3,"sources":["webpack://personal-site/./node_modules/gatsby-plugin-mdx/index.js","webpack://personal-site/./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack://personal-site/./node_modules/theme-ui/dist/theme-ui.esm.js","webpack://personal-site/./src/templates/post.js"],"names":["MDXRenderer","require","module","React","mdx","useMDXScope","scope","children","props","mdxScope","End","fullScope","keys","Object","values","key","fn","jsx","data","blog","nodes","body","frontmatter","console","log","mode","sx","mb","start","width","mt","pt","to","prefix","as","variant","title","fontFamily","fontSpacing","fontSize","author","toUpperCase","Date","date","toDateString"],"mappings":"sGAMA,IAAMA,EAAcC,EAApB,MAEAC,UAAiB,CACfF,YADFE,I,spBCRA,IAAMC,EAAQF,EAAd,MACQG,EAAQH,EAAhB,UACQI,EAAgBJ,EAAxB,kBAEAC,EAAA,QAAiB,SAAqB,GACpCI,MAGC,EAHDA,MACAC,EAEC,EAFDA,SACGC,EACF,OACKC,EAAWJ,EAAjB,GAGMK,EAAMP,WAAc,WACxB,MACE,OAAO,KAGT,IAAMQ,EAAS,GAGbR,MAHa,EAIbC,IAJa,GAAf,GAQMQ,EAAOC,YAAb,GACMC,EAASF,OAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACT,EAlBJ,IAoBA,OAAOJ,uBAAP,M,+EClBF,IAWIc,E,QAAM,G,4DCoDV,EA9Da,SAAC,GAAc,IAE1B,EAFyB,EAAXC,KACNC,KAC6BC,MAArC,GAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,YAGf,OAFAC,QAAQC,IAAIF,GAGV,EAAC,IAAD,CAAQG,KAAK,UACX,EAAC,KAAD,CAAKC,GAAI,CAAEC,GAAI,CAAC,EAAG,EAAG,EAAG,MACvB,EAAC,KAAD,CAAQC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAIC,MAAO,CAAC,IACnC,EAAC,KAAD,CACEH,GAAI,CACFI,GAAI,CAAC,EAAG,EAAG,EAAG,GACdH,GAAI,CAAC,EAAG,EAAG,EAAG,GACdI,GAAI,CAAC,EAAG,EAAG,EAAG,KAGhB,EAAC,KAAD,CAAMC,GAAI,SACR,EAAC,KAAD,CAAQC,OAAQ,EAAC,KAAD,OAAhB,WAKN,EAAC,KAAD,CAAQL,MAAO,CAAC,EAAG,EAAG,EAAG,GAAIC,MAAO,CAAC,EAAG,IACtC,EAAC,KAAD,CACEK,GAAG,KACHC,QAAQ,YACRT,GAAI,CACFI,GAAI,CAAC,EAAG,EAAG,EAAG,GACdH,GAAI,CAAC,EAAG,EAAG,EAAG,KAGfL,EAAYc,OAEf,EAAC,EAAApC,YAAD,KAAeqB,IAGjB,EAAC,KAAD,CAAQO,MAAO,CAAC,EAAG,EAAG,GAAI,IAAKC,MAAO,CAAC,EAAG,EAAG,EAAG,IAC9C,EAAC,KAAD,CACEH,GAAI,CACFI,GAAI,CAAC,EAAG,EAAG,EAAG,GACdH,GAAI,CAAC,EAAG,EAAG,EAAG,GACdI,GAAI,CAAC,EAAG,EAAG,EAAG,KAGhB,EAAC,KAAD,CACEL,GAAI,CACFW,WAAY,OACZC,YAAa,OACbC,SAAU,MAGXjB,EAAYkB,OAAOC,cACpB,aACC,IAAIC,KAAKpB,EAAYqB,MAAMC,eAAeH","file":"component---src-templates-post-js-0f9dcd5eeac9c09a8bf7.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  children,\n  ...props\n}) {\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, {...props })\n}\n","import _defineProperty from \"/home/runner/work/sanjayyepuri.github.io/sanjayyepuri.github.io/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { jsx as jsx$1 } from '@theme-ui/core';\nexport { __ThemeUIContext, createElement, merge, useThemeUI } from '@theme-ui/core';\nexport { InitializeColorMode, useColorMode } from '@theme-ui/color-modes';\nexport { Styled, Themed, components } from '@theme-ui/mdx';\nexport { ThemeProvider } from '@theme-ui/theme-provider';\nexport * from '@theme-ui/components';\nexport { css, get } from '@theme-ui/css';\n\nvar BaseStyles = function BaseStyles(props) {\n  return jsx('div', _objectSpread(_objectSpread({}, props), {}, {\n    sx: {\n      fontFamily: 'body',\n      lineHeight: 'body',\n      fontWeight: 'body',\n      variant: 'styles'\n    }\n  }));\n};\n\nvar jsx = jsx$1;\nexport { BaseStyles, jsx };","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"; \n\nimport { graphql, Link } from \"gatsby\";\n\nimport \"katex/dist/katex.min.css\";\n\nimport Layout from \"../components/layout\";\n\nimport { MDXRenderer } from \"gatsby-plugin-mdx\";\n\nimport { Box, Text } from \"theme-ui\";\nimport { Column, Row, Button } from \"@carbonplan/components\";\nimport { Left } from \"@carbonplan/icons\";\n\nconst Post = ({ data }) => {\n  const { blog } = data;\n  const [{ body, frontmatter }] = blog.nodes;\n  console.log(frontmatter);\n\n  return (\n    <Layout mode=\"scroll\">\n      <Row sx={{ mb: [8, 8, 9, 10] }}>\n        <Column start={[1, 1, 1, 1]} width={[2]}>\n          <Box\n            sx={{\n              mt: [5, 6, 7, 8],\n              mb: [1, 6, 7, 8],\n              pt: [2, 2, 2, 2],\n            }}\n          >\n            <Link to={\"/blog\"}>\n              <Button prefix={<Left />}>Back</Button>\n            </Link>\n          </Box>\n        </Column>\n\n        <Column start={[1, 2, 3, 3]} width={[6, 6]}>\n          <Box\n            as=\"h1\"\n            variant=\"styles.h1\"\n            sx={{\n              mt: [5, 6, 7, 8],\n              mb: [5, 6, 7, 8],\n            }}\n          >\n            {frontmatter.title}\n          </Box>\n          <MDXRenderer>{ body }</MDXRenderer>\n        </Column>\n\n        <Column start={[1, 8, 10, 10]} width={[2, 2, 2, 2]}>\n          <Box\n            sx={{\n              mt: [5, 6, 7, 8],\n              mb: [1, 6, 7, 8],\n              pt: [2, 2, 2, 2],\n            }}\n          >\n            <Text\n              sx={{\n                fontFamily: \"mono\",\n                fontSpacing: \"mono\",\n                fontSize: \"3\",\n              }}\n            >\n              {frontmatter.author.toUpperCase()}\n              <br />\n              {new Date(frontmatter.date).toDateString().toUpperCase()}\n            </Text>\n          </Box>\n        </Column>\n      </Row>\n    </Layout>\n  );\n};\n\nexport default Post;\n\nexport const query = graphql`\n  query BlogQuery($slug: String!) {\n    blog: allMdx(filter: { slug: { eq: $slug } }) {\n      nodes {\n        body\n        frontmatter {\n          date\n          title\n          author\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}